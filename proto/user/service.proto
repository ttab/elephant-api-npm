syntax = "proto3";

import "newsdoc/newsdoc.proto";

package elephant.user;

option go_package = "github.com/ttab/elephant-api/user";

service Messages {
  // Pushes a new message to a recipient.
  rpc PushMessage(PushMessageRequest) returns (PushMessageResponse);
  // Pushes a new inbox message to a recipient.
  rpc PushInboxMessage(PushInboxMessageRequest) returns (PushInboxMessageResponse);
  // Polls for new messages for a recipient.
  rpc PollMessages (PollMessagesRequest) returns (PollMessagesResponse);
  // Polls for new inbox messages for a recipient.
  rpc PollInboxMessages (PollInboxMessagesRequest) returns (PollInboxMessagesResponse);
  // Lists all inbox messages for a recipient.
  rpc ListInboxMessages (ListInboxMessagesRequest) returns (ListInboxMessagesResponse);
  // Updates an existing inbox message.
  rpc UpdateInboxMessage (UpdateInboxMessageRequest) returns (UpdateInboxMessageResponse);
  // Deletes an inbox message.
  rpc DeleteInboxMessage (DeleteInboxMessageRequest) returns (DeleteInboxMessageResponse);
}

message PushMessageRequest {
  // Type of message being sent (e.g. "validation_error").
  string type                 = 1;
  // Recipient of the message (user sub).
  string recipient            = 2;
  // UUID of the associated document, optional.
  string doc_uuid             = 3;
  // Type of the associated document, optional.
  string doc_type             = 4;
  // Payload containing a key-value map.
  map<string, string> payload = 5;
}

message PushMessageResponse {}

message PushInboxMessageRequest {
  // Recipient of the message (user sub).
  string recipient          = 1;
  // Payload containing a newsdoc document.
  newsdoc.Document payload  = 2;
}

message PushInboxMessageResponse {}

message PollMessagesRequest {
  // ID of the message after which to start returning messages.
  int64 after_id = 1;
}

message PollMessagesResponse {
  // ID of the most recent message returned. Useful for subsequent polling requests.
  // If no new messages are returned, it will reflect the "after_id" from the request.
  int64 last_id             = 1;
  // Messages sorted in descending order by id (reflects the created timestamp).
  repeated Message messages = 2;
}

message Message {
  // ID of the message.
  int64 id                    = 1;
  // Type of message being sent (e.g. "validation_error").
  string type                 = 2;
  // Created timestamp is the RFC3339 timestamp
  // for when the message was created.
  string created              = 3;
  // Creator of the message (application sub).
  string created_by           = 4;
  // Recipient of the message (user sub).
  string recipient            = 5;
  // UUID of the associated document, optional.
  string doc_uuid             = 6;
  // Type of the associated document, optional.
  string doc_type             = 7;
  // Payload containing a key-value map.
  map<string, string> payload = 8;
}

message PollInboxMessagesRequest {
  // ID of the message after which to start returning messages.
  int64 after_id = 1;
}

message PollInboxMessagesResponse {
  // ID of the most recent message returned. Useful for subsequent polling requests.
  // If no new messages are returned, it will reflect the "after_id" from the request.
  int64 last_id                   = 1;
  // Messages sorted in descending order by id (reflects the created timestamp).
  repeated InboxMessage messages  = 2;
}

message InboxMessage {
  // Recipient of the message (user sub).
  string recipient          = 1;
  // ID of the message.
  int64 id                  = 2;
  // Created timestamp is the RFC3339 timestamp
  // for when the message was created.
  string created            = 3;
  // Creator of the message (application sub).
  string created_by         = 4;
  // Updated timestamp is the RFC3339 timestamp
  // for when the message was last updated.
  string updated            = 5;
  // Indicates whether the message has been read.
  bool is_read              = 6;
  // Payload containing a newsdoc document.
  newsdoc.Document payload  = 7;
}

message ListInboxMessagesRequest {
  // ID of the message before which to list messages.
  int64 before_id   = 1;
  // Number of messages to include in the results (defaults to 10).
  int64 size        = 2;
}

message ListInboxMessagesResponse {
  // ID of the latest message returned. Useful for subsequent polling requests.
  int64 latest_id         = 1;
  // ID of the earliest message returned. Useful for paginating backward.
  int64 earliest_id       = 2;
  // Messages sorted in descending order by id (reflects the created timestamp).
  repeated InboxMessage messages  = 3;
}

message UpdateInboxMessageRequest {
  // ID of the message.
  int64 id      = 1;
  // Sets the message's read status.
  bool is_read  = 2;
}

message UpdateInboxMessageResponse {}

message DeleteInboxMessageRequest {
  // ID of the message.
  int64 id = 1;
}

message DeleteInboxMessageResponse {}
