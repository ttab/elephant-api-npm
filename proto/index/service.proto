syntax = "proto3";

import "newsdoc/newsdoc.proto";

package elephant.index;

option go_package = "github.com/ttab/elephant-api/index";

service Management {
  // RegisterCluster for use with index sets.
  rpc RegisterCluster(RegisterClusterRequest) returns (RegisterClusterResponse);
  // ListClusters returns a list of clusters together with information about the
  // number of index sets they contain.
  rpc ListClusters(ListClustersRequest) returns (ListClustersResponse);
  // DeleteCluster deletes a registered cluster. A cluster cannot be deleted as
  // long as it has associated index sets.
  rpc DeleteCluster(DeleteClusterRequest) returns (DeleteClusterResponse);
  // DeleteIndexSet deletes an index set. The set cannot be active or enabled.
  rpc DeleteIndexSet(DeleteIndexSetRequest) returns (DeleteIndexSetResponse);
  // Reindex set creates a new index set in the specified cluster and starts
  // indexing documents to it.
  rpc Reindex(ReindexRequest) returns (ReindexResponse);
  // PartialReindex restarts an existing index set from a given point in the
  // repository eventlog.
  rpc PartialReindex(PartialReindexRequest) returns (PartialReindexResponse);
  // ListIndexSets lists the available index set, with optional filtering.
  rpc ListIndexSets(ListIndexSetsRequest) returns (ListIndexSetsResponse);
  // SetIndexSetStatus is used to change the status of an index set.
  rpc SetIndexSetStatus(SetIndexSetStatusRequest) returns (SetIndexSetStatusResponse);
}

service SearchV1 {
  rpc Query(QueryRequestV1) returns (QueryResponseV1);
  rpc MultiSearch(MultiSearchRequest) returns (MultiSearchResponse);
  rpc GetMappings(GetMappingsRequestV1) returns (GetMappingsResponseV1);
  rpc PollSubscription(PollSubscriptionRequest) returns (PollSubscriptionResponse);
  rpc EndSubscription(EndSubscriptionRequest) returns (EndSubscriptionResponse);
}

message RegisterClusterRequest {
  // Name used to identify the cluster.
  string name              = 1;
  // Endpoint for the cluster.
  string endpoint          = 2;
  // Auth is used to specify the authentication method.
  RegisterClusterAuth auth = 3;
}

message RegisterClusterAuth {
  // IAM authentication.
  bool iam = 1;
}

message RegisterClusterResponse {}

message ReindexRequest {
  // Cluster that we should re-index set to.
  string cluster = 1;
}

message ReindexResponse {
  // Name of the new index set.
  string name = 1;
}

message ListClustersRequest {}

message ListClustersResponse {
  repeated Cluster clusters = 1;
}

message Cluster {
  // Name used to identify the cluster.
  string name           = 1;
  // Endpoint for the cluster.
  string endpoint       = 2;
  // Number of index sets in the cluster.
  int64 index_set_count = 3;
  // Auth options for the cluster.
  ClusterAuth auth      = 4;
}

message ClusterAuth {
  // IAM authentication.
  bool iam = 1;
}

message DeleteClusterRequest {
  // Name of the cluster to delete.
  string name = 1;
}

message DeleteClusterResponse {}

message DeleteIndexSetRequest {
  // Name of the index set to delete.
  string name = 1;
}

message DeleteIndexSetResponse {}

message SetIndexSetStatusRequest {
  // Name of the index set to set the status of.
  string name       = 1;
  // Active means that search requests are being routed to this index set. There
  // is always exactly one active index set at a time. Setting an index set to
  // active will deactivate but not disable the currently active index set.
  bool active       = 2;
  // ForceActive is used to force the activation of an index set that lags more
  // than 10 events behind the currently active set.
  bool force_active = 3;
  // Enabled means that documents should index to the index set. Disabling an
  // index set will only pause index seting, and it can later be
  // resumed. Disabling an index set does not deactivate it.
  bool enabled      = 4;
}

message SetIndexSetStatusResponse {}

message PartialReindexRequest {
  // IndexSet to re-index.
  string index_set = 1;
  // Position to start from.
  int64 position   = 2;
}

message PartialReindexResponse {}

message ListIndexSetsRequest {
  // Cluster can be used to filter by cluster.
  string cluster        = 1;
  // OnlyActive only returns the currently active index set.
  bool only_active      = 2;
  // Status can be used to filter index sets by their enabled/disabled status.
  EnabledFilter  status = 3;
  // Cursor to the page that should be returned. Omit to get the first page.
  string cursor         = 4;
}

enum EnabledFilter {
  STATUS_UNSPECIFIED = 0;
  // STATUS_ENABLED means that documents are currently being indexed to the
  // index set.
  STATUS_ENABLED     = 1;
  // STATUS_DISABLED means that no documents are being indexed to the index set.
  STATUS_DISABLED    = 3;
}

message ListIndexSetsResponse {
  // IndexSets that matched the criteria.
  repeated IndexSet index_sets = 1;
  // NextPage cursor to use to get the next page of index sets. Empty if no more
  // index sets exist.
  string next_page             = 2;
}

message IndexSet {
  // Name of the index set.
  string name    = 1;
  // Cluster that the index set has been created in.
  string cluster = 2;
  // Enabled status of the index set.
  bool enabled   = 3;
  // Active status of the index set.
  bool active    = 4;
  // Position in the repository content log.
  int64 position = 5;
}

message MultiSearchRequest {
  repeated QueryRequestV1 queries = 1;
}

message MultiSearchResponse {
  repeated QueryResponseV1 results = 1;
}


message QueryRequestV1 {
  string document_type         = 1;
  string language              = 2;
  QueryV1 query                = 3;
  repeated string fields       = 4;
  repeated SortingV1 sort      = 5;
  bool source                  = 6;
  int64 from                   = 7;
  int64 size                   = 8;
  repeated string search_after = 9;
  // LoadDocument will load the current version of the document from the
  // repository and include it with the search response.
  bool load_document           = 10;
  // Subscribe starts a subscription for the query.
  bool subscribe               = 11;
  // Shared performs the query without the identity of the user, allows for
  // better query caching and shared subscriptions.
  bool shared                  = 12;
}

message QueryV1 {
  oneof conditions {
    BoolQueryV1 bool                 = 1;
    RangeQueryV1 range               = 2;
    string exists                    = 3;
    MatchAllQueryV1 match_all        = 4;
    TermQueryV1 term                 = 5;
    TermsQueryV1 terms               = 6;
    MatchQueryV1 match               = 7;
    MatchPhraseQueryV1 match_phrase  = 8;
    string query_string              = 9;
    PrefixQueryV1 prefix             = 10;
    MultiMatchQueryV1 multi_match    = 11;
  }
}

message BoolQueryV1 {
  repeated QueryV1 must      = 1;
  repeated QueryV1 must_not  = 2;
  repeated QueryV1 should    = 3;
  repeated QueryV1 filter    = 4;
  int64 minimum_should_match = 5;
}

message RangeQueryV1 {
  string field = 1;
  string gt    = 2;
  string gte   = 3;
  string lt    = 4;
  string lte   = 5;
}

message MatchAllQueryV1 {}

message TermQueryV1 {
  string field = 1;
  string value = 2;
  double boost = 3;
}

message TermsQueryV1 {
  string field = 1;
  repeated string values = 2;
  double boost = 3;
}

message MatchQueryV1 {
  string field = 1;
  string value = 2;
  double boost = 3;
}

message MultiMatchQueryV1 {
  repeated string fields = 1;
  // Type is the multi-match query type. Valid values are best_fields,
  // most_fields, cross_fields, phrase, phrase_prefix, bool_prefix. Default is
  // best_fields.
  string type            = 2;
  string query           = 3;
  double boost           = 4;
  // BooleanAnd can be used to require all terms to match.
  bool boolean_and       = 5;
  // MinimumShouldMatch if the query string contains multiple search terms and
  // you use the or operator, the number of terms that need to match for the
  // document to be considered a match. See
  // https://opensearch.org/docs/latest/query-dsl/minimum-should-match/
  string minimum_should_match = 6;
  float tie_breaker      = 7;
  // PrefixLength is the number of beginning characters left unchanged for fuzzy
  // matching. Optional, defaults to 0.
  int64 prefix_length    = 8;
  // Fuzziness is the maximum edit distance allowed for matching.
  Fuzziness fuzziness    = 9;
}

// Fuzziness has more ways to be specified, implementing that when we need it.
message Fuzziness {
  // Edits is the maximum allowed Levenshtein Edit Distance (or number of
  // edits).
  int64 edits = 1;
}

message MatchPhraseQueryV1 {
  string field = 1;
  string value = 2;
}

message PrefixQueryV1 {
  string field = 1;
  string value = 2;
  bool case_insensitive = 3;
  double boost = 4;
}

message SortingV1 {
  string field = 1;
  bool desc    = 2;
}

message QueryResponseV1 {
  int64 took      = 1;
  bool timed_out  = 2;
  ShardsV1 shards = 3;
  HitsV1 hits     = 4;
  // Subsciption for search results, if any was started.
  SubscriptionReference subscription = 5;
}

message ShardsV1 {
  int32 total      = 1;
  int32 successful = 2;
  int32 skipped    = 3;
  int32 failed     = 4;
}

message HitsV1 {
  HitsTotalV1 total   = 1;
  float max_score     = 2;
  repeated HitV1 hits = 3;
}

message HitsTotalV1 {
  int64 value     = 1;
  string relation = 2;
}

message HitV1 {
  string id    = 1;
  float score  = 2;
  map<string, FieldValuesV1> fields = 3;
  map<string, FieldValuesV1> source = 4;
  repeated string sort              = 5;
  newsdoc.Document document         = 6;
}

message FieldValuesV1 {
  repeated string values = 1;
}

message GetMappingsRequestV1 {
  string document_type = 1;
}

message GetMappingsResponseV1 {
  repeated MappingPropertyV1 properties = 1;
}

message MappingPropertyV1 {
  // Name of the property.
  string name = 1;
  // Type of the property.
  string type = 2;
  // Path used for alias properties.
  string path = 3;
  // Fields used for alternate indexing metods for the property.
  repeated MappingFieldV1 fields = 4;
}

message MappingFieldV1 {
  // Name of the field.
  string name = 1;
  // Type of the field. Does not exactly correspond to Open Search types, but
  // represents the logical type.
  string type = 2;
}

message PollSubscriptionRequest {
  // Subscriptions to poll.
  repeated SubscriptionReference subscriptions = 1;
  // MaxWaitMS is the maximum time to wait before returning an empty
  // response. Optional, defaults to 10s.
  int64 max_wait_ms    = 2;
  // BatchDelayMS is the number of milliseconds to wait for more items after the
  // first. Optional, defaults to 200ms.
  int64 batch_delay_ms = 3;
  // NotifyOnly will skip loading any data to include with the hits.
  bool notify_only     = 4;
}

message SubscriptionReference {
  // ID of the subscription.
  int64 id     = 1;
  // Cursor for current subscription position.
  int64 cursor = 2;
}

message PollSubscriptionResponse {
  // Results will be empty if the poll timed out.
  repeated SubscriptionPollResult result = 1;
  // List of subscriptions that are unknown, have expired f.ex.
  repeated int64 unknown_subscriptions   = 2;
}

message SubscriptionPollResult {
  // Subscription with current cursor position.
  SubscriptionReference subscription = 1;
  // Items that matched or stopped matching the subscription.
  repeated SubscriptionItem items = 2;
}

message SubscriptionItem {
  string id    = 1;
  bool match   = 2;
  map<string, FieldValuesV1> fields = 3;
  map<string, FieldValuesV1> source = 4;
  newsdoc.Document document         = 5;
}

message EndSubscriptionRequest {
  int64 id = 1;
}

message EndSubscriptionResponse {}
