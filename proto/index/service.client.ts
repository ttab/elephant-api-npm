/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,ts_nocheck,eslint_disable
// @generated from protobuf file "index/service.proto" (package "elephant.index", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Management } from "./service";
import type { SetIndexSetStatusResponse } from "./service";
import type { SetIndexSetStatusRequest } from "./service";
import type { ListIndexSetsResponse } from "./service";
import type { ListIndexSetsRequest } from "./service";
import type { PartialReindexResponse } from "./service";
import type { PartialReindexRequest } from "./service";
import type { ReindexResponse } from "./service";
import type { ReindexRequest } from "./service";
import type { DeleteIndexSetResponse } from "./service";
import type { DeleteIndexSetRequest } from "./service";
import type { DeleteClusterResponse } from "./service";
import type { DeleteClusterRequest } from "./service";
import type { ListClustersResponse } from "./service";
import type { ListClustersRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RegisterClusterResponse } from "./service";
import type { RegisterClusterRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service elephant.index.Management
 */
export interface IManagementClient {
    /**
     * RegisterCluster for use with index sets.
     *
     * @generated from protobuf rpc: RegisterCluster(elephant.index.RegisterClusterRequest) returns (elephant.index.RegisterClusterResponse);
     */
    registerCluster(input: RegisterClusterRequest, options?: RpcOptions): UnaryCall<RegisterClusterRequest, RegisterClusterResponse>;
    /**
     * ListClusters returns a list of clusters together with information about the
     * number of index sets they contain.
     *
     * @generated from protobuf rpc: ListClusters(elephant.index.ListClustersRequest) returns (elephant.index.ListClustersResponse);
     */
    listClusters(input: ListClustersRequest, options?: RpcOptions): UnaryCall<ListClustersRequest, ListClustersResponse>;
    /**
     * DeleteCluster deletes a registered cluster. A cluster cannot be deleted as
     * long as it has associated index sets.
     *
     * @generated from protobuf rpc: DeleteCluster(elephant.index.DeleteClusterRequest) returns (elephant.index.DeleteClusterResponse);
     */
    deleteCluster(input: DeleteClusterRequest, options?: RpcOptions): UnaryCall<DeleteClusterRequest, DeleteClusterResponse>;
    /**
     * DeleteIndexSet deletes an index set. The set cannot be active or enabled.
     *
     * @generated from protobuf rpc: DeleteIndexSet(elephant.index.DeleteIndexSetRequest) returns (elephant.index.DeleteIndexSetResponse);
     */
    deleteIndexSet(input: DeleteIndexSetRequest, options?: RpcOptions): UnaryCall<DeleteIndexSetRequest, DeleteIndexSetResponse>;
    /**
     * Reindex set creates a new index set in the specified cluster and starts
     * indexing documents to it.
     *
     * @generated from protobuf rpc: Reindex(elephant.index.ReindexRequest) returns (elephant.index.ReindexResponse);
     */
    reindex(input: ReindexRequest, options?: RpcOptions): UnaryCall<ReindexRequest, ReindexResponse>;
    /**
     * PartialReindex restarts an existing index set from a given point in the
     * repository eventlog.
     *
     * @generated from protobuf rpc: PartialReindex(elephant.index.PartialReindexRequest) returns (elephant.index.PartialReindexResponse);
     */
    partialReindex(input: PartialReindexRequest, options?: RpcOptions): UnaryCall<PartialReindexRequest, PartialReindexResponse>;
    /**
     * ListIndexSets lists the available index set, with optional filtering.
     *
     * @generated from protobuf rpc: ListIndexSets(elephant.index.ListIndexSetsRequest) returns (elephant.index.ListIndexSetsResponse);
     */
    listIndexSets(input: ListIndexSetsRequest, options?: RpcOptions): UnaryCall<ListIndexSetsRequest, ListIndexSetsResponse>;
    /**
     * SetIndexSetStatus is used to change the status of an index set.
     *
     * @generated from protobuf rpc: SetIndexSetStatus(elephant.index.SetIndexSetStatusRequest) returns (elephant.index.SetIndexSetStatusResponse);
     */
    setIndexSetStatus(input: SetIndexSetStatusRequest, options?: RpcOptions): UnaryCall<SetIndexSetStatusRequest, SetIndexSetStatusResponse>;
}
/**
 * @generated from protobuf service elephant.index.Management
 */
export class ManagementClient implements IManagementClient, ServiceInfo {
    typeName = Management.typeName;
    methods = Management.methods;
    options = Management.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * RegisterCluster for use with index sets.
     *
     * @generated from protobuf rpc: RegisterCluster(elephant.index.RegisterClusterRequest) returns (elephant.index.RegisterClusterResponse);
     */
    registerCluster(input: RegisterClusterRequest, options?: RpcOptions): UnaryCall<RegisterClusterRequest, RegisterClusterResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterClusterRequest, RegisterClusterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListClusters returns a list of clusters together with information about the
     * number of index sets they contain.
     *
     * @generated from protobuf rpc: ListClusters(elephant.index.ListClustersRequest) returns (elephant.index.ListClustersResponse);
     */
    listClusters(input: ListClustersRequest, options?: RpcOptions): UnaryCall<ListClustersRequest, ListClustersResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListClustersRequest, ListClustersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteCluster deletes a registered cluster. A cluster cannot be deleted as
     * long as it has associated index sets.
     *
     * @generated from protobuf rpc: DeleteCluster(elephant.index.DeleteClusterRequest) returns (elephant.index.DeleteClusterResponse);
     */
    deleteCluster(input: DeleteClusterRequest, options?: RpcOptions): UnaryCall<DeleteClusterRequest, DeleteClusterResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteClusterRequest, DeleteClusterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteIndexSet deletes an index set. The set cannot be active or enabled.
     *
     * @generated from protobuf rpc: DeleteIndexSet(elephant.index.DeleteIndexSetRequest) returns (elephant.index.DeleteIndexSetResponse);
     */
    deleteIndexSet(input: DeleteIndexSetRequest, options?: RpcOptions): UnaryCall<DeleteIndexSetRequest, DeleteIndexSetResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteIndexSetRequest, DeleteIndexSetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Reindex set creates a new index set in the specified cluster and starts
     * indexing documents to it.
     *
     * @generated from protobuf rpc: Reindex(elephant.index.ReindexRequest) returns (elephant.index.ReindexResponse);
     */
    reindex(input: ReindexRequest, options?: RpcOptions): UnaryCall<ReindexRequest, ReindexResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReindexRequest, ReindexResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * PartialReindex restarts an existing index set from a given point in the
     * repository eventlog.
     *
     * @generated from protobuf rpc: PartialReindex(elephant.index.PartialReindexRequest) returns (elephant.index.PartialReindexResponse);
     */
    partialReindex(input: PartialReindexRequest, options?: RpcOptions): UnaryCall<PartialReindexRequest, PartialReindexResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<PartialReindexRequest, PartialReindexResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListIndexSets lists the available index set, with optional filtering.
     *
     * @generated from protobuf rpc: ListIndexSets(elephant.index.ListIndexSetsRequest) returns (elephant.index.ListIndexSetsResponse);
     */
    listIndexSets(input: ListIndexSetsRequest, options?: RpcOptions): UnaryCall<ListIndexSetsRequest, ListIndexSetsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListIndexSetsRequest, ListIndexSetsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetIndexSetStatus is used to change the status of an index set.
     *
     * @generated from protobuf rpc: SetIndexSetStatus(elephant.index.SetIndexSetStatusRequest) returns (elephant.index.SetIndexSetStatusResponse);
     */
    setIndexSetStatus(input: SetIndexSetStatusRequest, options?: RpcOptions): UnaryCall<SetIndexSetStatusRequest, SetIndexSetStatusResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetIndexSetStatusRequest, SetIndexSetStatusResponse>("unary", this._transport, method, opt, input);
    }
}
