/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,ts_nocheck,eslint_disable
// @generated from protobuf file "repository/service.proto" (package "elephant.repository", syntax proto3)
// tslint:disable
// @ts-nocheck
import { Metrics } from "./service";
import type { GetMetricsResponse } from "./service";
import type { GetMetricsRequest } from "./service";
import type { RegisterMetricResponse } from "./service";
import type { RegisterMetricRequest } from "./service";
import type { GetMetricKindsResponse } from "./service";
import type { GetMetricKindsRequest } from "./service";
import type { DeleteMetricKindResponse } from "./service";
import type { DeleteMetricKindRequest } from "./service";
import type { RegisterMetricKindResponse } from "./service";
import type { RegisterMetricKindRequest } from "./service";
import { Workflows } from "./service";
import type { DeleteWorkflowResponse } from "./service";
import type { DeleteWorkflowRequest } from "./service";
import type { GetWorkflowResponse } from "./service";
import type { GetWorkflowRequest } from "./service";
import type { SetWorkflowResponse } from "./service";
import type { SetWorkflowRequest } from "./service";
import type { GetStatusRulesResponse } from "./service";
import type { GetStatusRulesRequest } from "./service";
import type { DeleteStatusRuleResponse } from "./service";
import type { DeleteStatusRuleRequest } from "./service";
import type { CreateStatusRuleResponse } from "./service";
import type { CreateStatusRuleRequest } from "./service";
import type { GetStatusesResponse } from "./service";
import type { GetStatusesRequest } from "./service";
import type { UpdateStatusResponse } from "./service";
import type { UpdateStatusRequest } from "./service";
import { Schemas } from "./service";
import type { UpdateDeprecationResponse } from "./service";
import type { UpdateDeprecationRequest } from "./service";
import type { GetDeprecationsResponse } from "./service";
import type { GetDeprecationsRequest } from "./service";
import type { RegisterMetaTypeUseResponse } from "./service";
import type { RegisterMetaTypeUseRequest } from "./service";
import type { RegisterMetaTypeResponse } from "./service";
import type { RegisterMetaTypeRequest } from "./service";
import type { GetAllActiveSchemasResponse } from "./service";
import type { GetAllActiveSchemasRequest } from "./service";
import type { GetSchemaResponse } from "./service";
import type { GetSchemaRequest } from "./service";
import type { SetActiveSchemaResponse } from "./service";
import type { SetActiveSchemaRequest } from "./service";
import type { RegisterSchemaResponse } from "./service";
import type { RegisterSchemaRequest } from "./service";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Documents } from "./service";
import type { GetAttachmentsResponse } from "./service";
import type { GetAttachmentsRequest } from "./service";
import type { CreateUploadResponse } from "./service";
import type { CreateUploadRequest } from "./service";
import type { GetDeliverableInfoResponse } from "./service";
import type { GetDeliverableInfoRequest } from "./service";
import type { GetWithheldResponse } from "./service";
import type { GetWithheldRequest } from "./service";
import type { UnlockResponse } from "./service";
import type { UnlockRequest } from "./service";
import type { ExtendLockRequest } from "./service";
import type { LockResponse } from "./service";
import type { LockRequest } from "./service";
import type { GetPermissionsResponse } from "./service";
import type { GetPermissionsRequest } from "./service";
import type { GetStatusOverviewResponse } from "./service";
import type { GetStatusOverviewRequest } from "./service";
import type { GetNilStatusesResponse } from "./service";
import type { GetNilStatusesRequest } from "./service";
import type { GetStatusHistoryReponse } from "./service";
import type { GetStatusHistoryRequest } from "./service";
import type { GetStatusResponse } from "./service";
import type { GetStatusRequest } from "./service";
import type { GetCompactedEventlogResponse } from "./service";
import type { GetCompactedEventlogRequest } from "./service";
import type { GetEventlogResponse } from "./service";
import type { GetEventlogRequest } from "./service";
import type { GetMetaResponse } from "./service";
import type { GetMetaRequest } from "./service";
import type { PurgeResponse } from "./service";
import type { PurgeRequest } from "./service";
import type { RestoreResponse } from "./service";
import type { RestoreRequest } from "./service";
import type { ListDeletedResponse } from "./service";
import type { ListDeletedRequest } from "./service";
import type { DeleteDocumentResponse } from "./service";
import type { DeleteDocumentRequest } from "./service";
import type { ValidateResponse } from "./service";
import type { ValidateRequest } from "./service";
import type { BulkUpdateResponse } from "./service";
import type { BulkUpdateRequest } from "./service";
import type { UpdateResponse } from "./service";
import type { UpdateRequest } from "./service";
import type { GetHistoryResponse } from "./service";
import type { GetHistoryRequest } from "./service";
import type { BulkGetResponse } from "./service";
import type { BulkGetRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetDocumentResponse } from "./service";
import type { GetDocumentRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service elephant.repository.Documents
 */
export interface IDocumentsClient {
    /**
     * Get retrieves a document version.
     *
     * @generated from protobuf rpc: Get(elephant.repository.GetDocumentRequest) returns (elephant.repository.GetDocumentResponse);
     */
    get(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse>;
    /**
     * BulkGet loads multiple documents in a single request.
     *
     * @generated from protobuf rpc: BulkGet(elephant.repository.BulkGetRequest) returns (elephant.repository.BulkGetResponse);
     */
    bulkGet(input: BulkGetRequest, options?: RpcOptions): UnaryCall<BulkGetRequest, BulkGetResponse>;
    /**
     * GetHistory lists the document version history.
     *
     * @generated from protobuf rpc: GetHistory(elephant.repository.GetHistoryRequest) returns (elephant.repository.GetHistoryResponse);
     */
    getHistory(input: GetHistoryRequest, options?: RpcOptions): UnaryCall<GetHistoryRequest, GetHistoryResponse>;
    /**
     * Update is used to create new document versions, set statuses, update ACLs.
     *
     * @generated from protobuf rpc: Update(elephant.repository.UpdateRequest) returns (elephant.repository.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse>;
    /**
     * BulkUpdate is used to create new document versions, set statuses, update ACLs.
     *
     * @generated from protobuf rpc: BulkUpdate(elephant.repository.BulkUpdateRequest) returns (elephant.repository.BulkUpdateResponse);
     */
    bulkUpdate(input: BulkUpdateRequest, options?: RpcOptions): UnaryCall<BulkUpdateRequest, BulkUpdateResponse>;
    /**
     * Validate is used to validate a document without writing it to the
     * repository.
     *
     * @generated from protobuf rpc: Validate(elephant.repository.ValidateRequest) returns (elephant.repository.ValidateResponse);
     */
    validate(input: ValidateRequest, options?: RpcOptions): UnaryCall<ValidateRequest, ValidateResponse>;
    /**
     * Delete deletes a document and all its associated data.
     *
     * @generated from protobuf rpc: Delete(elephant.repository.DeleteDocumentRequest) returns (elephant.repository.DeleteDocumentResponse);
     */
    delete(input: DeleteDocumentRequest, options?: RpcOptions): UnaryCall<DeleteDocumentRequest, DeleteDocumentResponse>;
    /**
     * ListDeleted lists deleted document instances for a UUID.
     *
     * @generated from protobuf rpc: ListDeleted(elephant.repository.ListDeletedRequest) returns (elephant.repository.ListDeletedResponse);
     */
    listDeleted(input: ListDeletedRequest, options?: RpcOptions): UnaryCall<ListDeletedRequest, ListDeletedResponse>;
    /**
     * Restore recovers a deleted document.
     *
     * @generated from protobuf rpc: Restore(elephant.repository.RestoreRequest) returns (elephant.repository.RestoreResponse);
     */
    restore(input: RestoreRequest, options?: RpcOptions): UnaryCall<RestoreRequest, RestoreResponse>;
    /**
     * Purge removes a deleted document completely.
     *
     * @generated from protobuf rpc: Purge(elephant.repository.PurgeRequest) returns (elephant.repository.PurgeResponse);
     */
    purge(input: PurgeRequest, options?: RpcOptions): UnaryCall<PurgeRequest, PurgeResponse>;
    /**
     * GetMeta returns metadata for a document, including the ACL and current
     * status heads.
     *
     * @generated from protobuf rpc: GetMeta(elephant.repository.GetMetaRequest) returns (elephant.repository.GetMetaResponse);
     */
    getMeta(input: GetMetaRequest, options?: RpcOptions): UnaryCall<GetMetaRequest, GetMetaResponse>;
    /**
     * Eventlog returns document update events, optionally waiting for new events.
     *
     * @generated from protobuf rpc: Eventlog(elephant.repository.GetEventlogRequest) returns (elephant.repository.GetEventlogResponse);
     */
    eventlog(input: GetEventlogRequest, options?: RpcOptions): UnaryCall<GetEventlogRequest, GetEventlogResponse>;
    /**
     * CompactedEventlog returns document update events. If more than one event
     * has occured for a document in the given window only the latest will be returned.
     *
     * @generated from protobuf rpc: CompactedEventlog(elephant.repository.GetCompactedEventlogRequest) returns (elephant.repository.GetCompactedEventlogResponse);
     */
    compactedEventlog(input: GetCompactedEventlogRequest, options?: RpcOptions): UnaryCall<GetCompactedEventlogRequest, GetCompactedEventlogResponse>;
    /**
     * GetStatus returns a single status for a document.
     *
     * @generated from protobuf rpc: GetStatus(elephant.repository.GetStatusRequest) returns (elephant.repository.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse>;
    /**
     * GetStatusHistory returns the history of a status for a document.
     *
     * @generated from protobuf rpc: GetStatusHistory(elephant.repository.GetStatusHistoryRequest) returns (elephant.repository.GetStatusHistoryReponse);
     */
    getStatusHistory(input: GetStatusHistoryRequest, options?: RpcOptions): UnaryCall<GetStatusHistoryRequest, GetStatusHistoryReponse>;
    /**
     * GetNilStatuses returns all the statuses for a document where version is -1.
     *
     * @generated from protobuf rpc: GetNilStatuses(elephant.repository.GetNilStatusesRequest) returns (elephant.repository.GetNilStatusesResponse);
     */
    getNilStatuses(input: GetNilStatusesRequest, options?: RpcOptions): UnaryCall<GetNilStatusesRequest, GetNilStatusesResponse>;
    /**
     * GetStatusOverview returns the current version and a set of statuses for a
     * gven list of documents.
     *
     * @generated from protobuf rpc: GetStatusOverview(elephant.repository.GetStatusOverviewRequest) returns (elephant.repository.GetStatusOverviewResponse);
     */
    getStatusOverview(input: GetStatusOverviewRequest, options?: RpcOptions): UnaryCall<GetStatusOverviewRequest, GetStatusOverviewResponse>;
    /**
     * GetPermissions returns the permissions you have for the document.
     *
     * @generated from protobuf rpc: GetPermissions(elephant.repository.GetPermissionsRequest) returns (elephant.repository.GetPermissionsResponse);
     */
    getPermissions(input: GetPermissionsRequest, options?: RpcOptions): UnaryCall<GetPermissionsRequest, GetPermissionsResponse>;
    /**
     * Lock attempts to acquire a write lock on a document.
     *
     * @generated from protobuf rpc: Lock(elephant.repository.LockRequest) returns (elephant.repository.LockResponse);
     */
    lock(input: LockRequest, options?: RpcOptions): UnaryCall<LockRequest, LockResponse>;
    /**
     * ExtendLock extends the expiration of an existing lock.
     *
     * @generated from protobuf rpc: ExtendLock(elephant.repository.ExtendLockRequest) returns (elephant.repository.LockResponse);
     */
    extendLock(input: ExtendLockRequest, options?: RpcOptions): UnaryCall<ExtendLockRequest, LockResponse>;
    /**
     * Unlock releases a write lock on a document.
     *
     * @generated from protobuf rpc: Unlock(elephant.repository.UnlockRequest) returns (elephant.repository.UnlockResponse);
     */
    unlock(input: UnlockRequest, options?: RpcOptions): UnaryCall<UnlockRequest, UnlockResponse>;
    /**
     * GetWithheld returns the next upcoming scheduled publish actions. This is
     * not a complete list, but a list of the next N documents that are considered
     * eligible for publishing.
     *
     * @generated from protobuf rpc: GetWithheld(elephant.repository.GetWithheldRequest) returns (elephant.repository.GetWithheldResponse);
     */
    getWithheld(input: GetWithheldRequest, options?: RpcOptions): UnaryCall<GetWithheldRequest, GetWithheldResponse>;
    /**
     * GetDeliverableInfo returns available information related to the deliverable.
     *
     * @generated from protobuf rpc: GetDeliverableInfo(elephant.repository.GetDeliverableInfoRequest) returns (elephant.repository.GetDeliverableInfoResponse);
     */
    getDeliverableInfo(input: GetDeliverableInfoRequest, options?: RpcOptions): UnaryCall<GetDeliverableInfoRequest, GetDeliverableInfoResponse>;
    /**
     * CreateUpload is used to start the process of uploading objects that then
     * can be attached to a document.
     *
     * @generated from protobuf rpc: CreateUpload(elephant.repository.CreateUploadRequest) returns (elephant.repository.CreateUploadResponse);
     */
    createUpload(input: CreateUploadRequest, options?: RpcOptions): UnaryCall<CreateUploadRequest, CreateUploadResponse>;
    /**
     * GetAttachments returns download links for the requested attachments.
     *
     * @generated from protobuf rpc: GetAttachments(elephant.repository.GetAttachmentsRequest) returns (elephant.repository.GetAttachmentsResponse);
     */
    getAttachments(input: GetAttachmentsRequest, options?: RpcOptions): UnaryCall<GetAttachmentsRequest, GetAttachmentsResponse>;
}
/**
 * @generated from protobuf service elephant.repository.Documents
 */
export class DocumentsClient implements IDocumentsClient, ServiceInfo {
    typeName = Documents.typeName;
    methods = Documents.methods;
    options = Documents.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Get retrieves a document version.
     *
     * @generated from protobuf rpc: Get(elephant.repository.GetDocumentRequest) returns (elephant.repository.GetDocumentResponse);
     */
    get(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentRequest, GetDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * BulkGet loads multiple documents in a single request.
     *
     * @generated from protobuf rpc: BulkGet(elephant.repository.BulkGetRequest) returns (elephant.repository.BulkGetResponse);
     */
    bulkGet(input: BulkGetRequest, options?: RpcOptions): UnaryCall<BulkGetRequest, BulkGetResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<BulkGetRequest, BulkGetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetHistory lists the document version history.
     *
     * @generated from protobuf rpc: GetHistory(elephant.repository.GetHistoryRequest) returns (elephant.repository.GetHistoryResponse);
     */
    getHistory(input: GetHistoryRequest, options?: RpcOptions): UnaryCall<GetHistoryRequest, GetHistoryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetHistoryRequest, GetHistoryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Update is used to create new document versions, set statuses, update ACLs.
     *
     * @generated from protobuf rpc: Update(elephant.repository.UpdateRequest) returns (elephant.repository.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRequest, UpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * BulkUpdate is used to create new document versions, set statuses, update ACLs.
     *
     * @generated from protobuf rpc: BulkUpdate(elephant.repository.BulkUpdateRequest) returns (elephant.repository.BulkUpdateResponse);
     */
    bulkUpdate(input: BulkUpdateRequest, options?: RpcOptions): UnaryCall<BulkUpdateRequest, BulkUpdateResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<BulkUpdateRequest, BulkUpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Validate is used to validate a document without writing it to the
     * repository.
     *
     * @generated from protobuf rpc: Validate(elephant.repository.ValidateRequest) returns (elephant.repository.ValidateResponse);
     */
    validate(input: ValidateRequest, options?: RpcOptions): UnaryCall<ValidateRequest, ValidateResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ValidateRequest, ValidateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Delete deletes a document and all its associated data.
     *
     * @generated from protobuf rpc: Delete(elephant.repository.DeleteDocumentRequest) returns (elephant.repository.DeleteDocumentResponse);
     */
    delete(input: DeleteDocumentRequest, options?: RpcOptions): UnaryCall<DeleteDocumentRequest, DeleteDocumentResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteDocumentRequest, DeleteDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListDeleted lists deleted document instances for a UUID.
     *
     * @generated from protobuf rpc: ListDeleted(elephant.repository.ListDeletedRequest) returns (elephant.repository.ListDeletedResponse);
     */
    listDeleted(input: ListDeletedRequest, options?: RpcOptions): UnaryCall<ListDeletedRequest, ListDeletedResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDeletedRequest, ListDeletedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Restore recovers a deleted document.
     *
     * @generated from protobuf rpc: Restore(elephant.repository.RestoreRequest) returns (elephant.repository.RestoreResponse);
     */
    restore(input: RestoreRequest, options?: RpcOptions): UnaryCall<RestoreRequest, RestoreResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<RestoreRequest, RestoreResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Purge removes a deleted document completely.
     *
     * @generated from protobuf rpc: Purge(elephant.repository.PurgeRequest) returns (elephant.repository.PurgeResponse);
     */
    purge(input: PurgeRequest, options?: RpcOptions): UnaryCall<PurgeRequest, PurgeResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<PurgeRequest, PurgeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetMeta returns metadata for a document, including the ACL and current
     * status heads.
     *
     * @generated from protobuf rpc: GetMeta(elephant.repository.GetMetaRequest) returns (elephant.repository.GetMetaResponse);
     */
    getMeta(input: GetMetaRequest, options?: RpcOptions): UnaryCall<GetMetaRequest, GetMetaResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMetaRequest, GetMetaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Eventlog returns document update events, optionally waiting for new events.
     *
     * @generated from protobuf rpc: Eventlog(elephant.repository.GetEventlogRequest) returns (elephant.repository.GetEventlogResponse);
     */
    eventlog(input: GetEventlogRequest, options?: RpcOptions): UnaryCall<GetEventlogRequest, GetEventlogResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEventlogRequest, GetEventlogResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CompactedEventlog returns document update events. If more than one event
     * has occured for a document in the given window only the latest will be returned.
     *
     * @generated from protobuf rpc: CompactedEventlog(elephant.repository.GetCompactedEventlogRequest) returns (elephant.repository.GetCompactedEventlogResponse);
     */
    compactedEventlog(input: GetCompactedEventlogRequest, options?: RpcOptions): UnaryCall<GetCompactedEventlogRequest, GetCompactedEventlogResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCompactedEventlogRequest, GetCompactedEventlogResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetStatus returns a single status for a document.
     *
     * @generated from protobuf rpc: GetStatus(elephant.repository.GetStatusRequest) returns (elephant.repository.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRequest, GetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetStatusHistory returns the history of a status for a document.
     *
     * @generated from protobuf rpc: GetStatusHistory(elephant.repository.GetStatusHistoryRequest) returns (elephant.repository.GetStatusHistoryReponse);
     */
    getStatusHistory(input: GetStatusHistoryRequest, options?: RpcOptions): UnaryCall<GetStatusHistoryRequest, GetStatusHistoryReponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusHistoryRequest, GetStatusHistoryReponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetNilStatuses returns all the statuses for a document where version is -1.
     *
     * @generated from protobuf rpc: GetNilStatuses(elephant.repository.GetNilStatusesRequest) returns (elephant.repository.GetNilStatusesResponse);
     */
    getNilStatuses(input: GetNilStatusesRequest, options?: RpcOptions): UnaryCall<GetNilStatusesRequest, GetNilStatusesResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNilStatusesRequest, GetNilStatusesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetStatusOverview returns the current version and a set of statuses for a
     * gven list of documents.
     *
     * @generated from protobuf rpc: GetStatusOverview(elephant.repository.GetStatusOverviewRequest) returns (elephant.repository.GetStatusOverviewResponse);
     */
    getStatusOverview(input: GetStatusOverviewRequest, options?: RpcOptions): UnaryCall<GetStatusOverviewRequest, GetStatusOverviewResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusOverviewRequest, GetStatusOverviewResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetPermissions returns the permissions you have for the document.
     *
     * @generated from protobuf rpc: GetPermissions(elephant.repository.GetPermissionsRequest) returns (elephant.repository.GetPermissionsResponse);
     */
    getPermissions(input: GetPermissionsRequest, options?: RpcOptions): UnaryCall<GetPermissionsRequest, GetPermissionsResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPermissionsRequest, GetPermissionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Lock attempts to acquire a write lock on a document.
     *
     * @generated from protobuf rpc: Lock(elephant.repository.LockRequest) returns (elephant.repository.LockResponse);
     */
    lock(input: LockRequest, options?: RpcOptions): UnaryCall<LockRequest, LockResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<LockRequest, LockResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ExtendLock extends the expiration of an existing lock.
     *
     * @generated from protobuf rpc: ExtendLock(elephant.repository.ExtendLockRequest) returns (elephant.repository.LockResponse);
     */
    extendLock(input: ExtendLockRequest, options?: RpcOptions): UnaryCall<ExtendLockRequest, LockResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExtendLockRequest, LockResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Unlock releases a write lock on a document.
     *
     * @generated from protobuf rpc: Unlock(elephant.repository.UnlockRequest) returns (elephant.repository.UnlockResponse);
     */
    unlock(input: UnlockRequest, options?: RpcOptions): UnaryCall<UnlockRequest, UnlockResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnlockRequest, UnlockResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetWithheld returns the next upcoming scheduled publish actions. This is
     * not a complete list, but a list of the next N documents that are considered
     * eligible for publishing.
     *
     * @generated from protobuf rpc: GetWithheld(elephant.repository.GetWithheldRequest) returns (elephant.repository.GetWithheldResponse);
     */
    getWithheld(input: GetWithheldRequest, options?: RpcOptions): UnaryCall<GetWithheldRequest, GetWithheldResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetWithheldRequest, GetWithheldResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetDeliverableInfo returns available information related to the deliverable.
     *
     * @generated from protobuf rpc: GetDeliverableInfo(elephant.repository.GetDeliverableInfoRequest) returns (elephant.repository.GetDeliverableInfoResponse);
     */
    getDeliverableInfo(input: GetDeliverableInfoRequest, options?: RpcOptions): UnaryCall<GetDeliverableInfoRequest, GetDeliverableInfoResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDeliverableInfoRequest, GetDeliverableInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CreateUpload is used to start the process of uploading objects that then
     * can be attached to a document.
     *
     * @generated from protobuf rpc: CreateUpload(elephant.repository.CreateUploadRequest) returns (elephant.repository.CreateUploadResponse);
     */
    createUpload(input: CreateUploadRequest, options?: RpcOptions): UnaryCall<CreateUploadRequest, CreateUploadResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUploadRequest, CreateUploadResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetAttachments returns download links for the requested attachments.
     *
     * @generated from protobuf rpc: GetAttachments(elephant.repository.GetAttachmentsRequest) returns (elephant.repository.GetAttachmentsResponse);
     */
    getAttachments(input: GetAttachmentsRequest, options?: RpcOptions): UnaryCall<GetAttachmentsRequest, GetAttachmentsResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAttachmentsRequest, GetAttachmentsResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service elephant.repository.Schemas
 */
export interface ISchemasClient {
    /**
     * Register register a new validation schema version.
     *
     * @generated from protobuf rpc: Register(elephant.repository.RegisterSchemaRequest) returns (elephant.repository.RegisterSchemaResponse);
     */
    register(input: RegisterSchemaRequest, options?: RpcOptions): UnaryCall<RegisterSchemaRequest, RegisterSchemaResponse>;
    /**
     * SetActive activates schema versions.
     *
     * @generated from protobuf rpc: SetActive(elephant.repository.SetActiveSchemaRequest) returns (elephant.repository.SetActiveSchemaResponse);
     */
    setActive(input: SetActiveSchemaRequest, options?: RpcOptions): UnaryCall<SetActiveSchemaRequest, SetActiveSchemaResponse>;
    /**
     * Get retrieves a schema.
     *
     * @generated from protobuf rpc: Get(elephant.repository.GetSchemaRequest) returns (elephant.repository.GetSchemaResponse);
     */
    get(input: GetSchemaRequest, options?: RpcOptions): UnaryCall<GetSchemaRequest, GetSchemaResponse>;
    /**
     * GetAllActiveSchemas returns the currently active schemas.
     *
     * @generated from protobuf rpc: GetAllActive(elephant.repository.GetAllActiveSchemasRequest) returns (elephant.repository.GetAllActiveSchemasResponse);
     */
    getAllActive(input: GetAllActiveSchemasRequest, options?: RpcOptions): UnaryCall<GetAllActiveSchemasRequest, GetAllActiveSchemasResponse>;
    /**
     * RegisterMetaType registers a type that can be used for meta documents.
     *
     * @generated from protobuf rpc: RegisterMetaType(elephant.repository.RegisterMetaTypeRequest) returns (elephant.repository.RegisterMetaTypeResponse);
     */
    registerMetaType(input: RegisterMetaTypeRequest, options?: RpcOptions): UnaryCall<RegisterMetaTypeRequest, RegisterMetaTypeResponse>;
    /**
     * RegisterMetaTypeUse registers a meta type for use with a main type.
     *
     * @generated from protobuf rpc: RegisterMetaTypeUse(elephant.repository.RegisterMetaTypeUseRequest) returns (elephant.repository.RegisterMetaTypeUseResponse);
     */
    registerMetaTypeUse(input: RegisterMetaTypeUseRequest, options?: RpcOptions): UnaryCall<RegisterMetaTypeUseRequest, RegisterMetaTypeUseResponse>;
    /**
     * GetDeprecations lists all deprecations.
     *
     * @generated from protobuf rpc: GetDeprecations(elephant.repository.GetDeprecationsRequest) returns (elephant.repository.GetDeprecationsResponse);
     */
    getDeprecations(input: GetDeprecationsRequest, options?: RpcOptions): UnaryCall<GetDeprecationsRequest, GetDeprecationsResponse>;
    /**
     * UpdateDeprecation creates or updates a deprecation.
     *
     * @generated from protobuf rpc: UpdateDeprecation(elephant.repository.UpdateDeprecationRequest) returns (elephant.repository.UpdateDeprecationResponse);
     */
    updateDeprecation(input: UpdateDeprecationRequest, options?: RpcOptions): UnaryCall<UpdateDeprecationRequest, UpdateDeprecationResponse>;
}
/**
 * @generated from protobuf service elephant.repository.Schemas
 */
export class SchemasClient implements ISchemasClient, ServiceInfo {
    typeName = Schemas.typeName;
    methods = Schemas.methods;
    options = Schemas.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Register register a new validation schema version.
     *
     * @generated from protobuf rpc: Register(elephant.repository.RegisterSchemaRequest) returns (elephant.repository.RegisterSchemaResponse);
     */
    register(input: RegisterSchemaRequest, options?: RpcOptions): UnaryCall<RegisterSchemaRequest, RegisterSchemaResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterSchemaRequest, RegisterSchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetActive activates schema versions.
     *
     * @generated from protobuf rpc: SetActive(elephant.repository.SetActiveSchemaRequest) returns (elephant.repository.SetActiveSchemaResponse);
     */
    setActive(input: SetActiveSchemaRequest, options?: RpcOptions): UnaryCall<SetActiveSchemaRequest, SetActiveSchemaResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetActiveSchemaRequest, SetActiveSchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get retrieves a schema.
     *
     * @generated from protobuf rpc: Get(elephant.repository.GetSchemaRequest) returns (elephant.repository.GetSchemaResponse);
     */
    get(input: GetSchemaRequest, options?: RpcOptions): UnaryCall<GetSchemaRequest, GetSchemaResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSchemaRequest, GetSchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetAllActiveSchemas returns the currently active schemas.
     *
     * @generated from protobuf rpc: GetAllActive(elephant.repository.GetAllActiveSchemasRequest) returns (elephant.repository.GetAllActiveSchemasResponse);
     */
    getAllActive(input: GetAllActiveSchemasRequest, options?: RpcOptions): UnaryCall<GetAllActiveSchemasRequest, GetAllActiveSchemasResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllActiveSchemasRequest, GetAllActiveSchemasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * RegisterMetaType registers a type that can be used for meta documents.
     *
     * @generated from protobuf rpc: RegisterMetaType(elephant.repository.RegisterMetaTypeRequest) returns (elephant.repository.RegisterMetaTypeResponse);
     */
    registerMetaType(input: RegisterMetaTypeRequest, options?: RpcOptions): UnaryCall<RegisterMetaTypeRequest, RegisterMetaTypeResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterMetaTypeRequest, RegisterMetaTypeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * RegisterMetaTypeUse registers a meta type for use with a main type.
     *
     * @generated from protobuf rpc: RegisterMetaTypeUse(elephant.repository.RegisterMetaTypeUseRequest) returns (elephant.repository.RegisterMetaTypeUseResponse);
     */
    registerMetaTypeUse(input: RegisterMetaTypeUseRequest, options?: RpcOptions): UnaryCall<RegisterMetaTypeUseRequest, RegisterMetaTypeUseResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterMetaTypeUseRequest, RegisterMetaTypeUseResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetDeprecations lists all deprecations.
     *
     * @generated from protobuf rpc: GetDeprecations(elephant.repository.GetDeprecationsRequest) returns (elephant.repository.GetDeprecationsResponse);
     */
    getDeprecations(input: GetDeprecationsRequest, options?: RpcOptions): UnaryCall<GetDeprecationsRequest, GetDeprecationsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDeprecationsRequest, GetDeprecationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateDeprecation creates or updates a deprecation.
     *
     * @generated from protobuf rpc: UpdateDeprecation(elephant.repository.UpdateDeprecationRequest) returns (elephant.repository.UpdateDeprecationResponse);
     */
    updateDeprecation(input: UpdateDeprecationRequest, options?: RpcOptions): UnaryCall<UpdateDeprecationRequest, UpdateDeprecationResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateDeprecationRequest, UpdateDeprecationResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service elephant.repository.Workflows
 */
export interface IWorkflowsClient {
    /**
     * UpdateStatus creates or updates a status that can be used for documents.
     *
     * @generated from protobuf rpc: UpdateStatus(elephant.repository.UpdateStatusRequest) returns (elephant.repository.UpdateStatusResponse);
     */
    updateStatus(input: UpdateStatusRequest, options?: RpcOptions): UnaryCall<UpdateStatusRequest, UpdateStatusResponse>;
    /**
     * GetStatuses lists all enabled statuses.
     *
     * @generated from protobuf rpc: GetStatuses(elephant.repository.GetStatusesRequest) returns (elephant.repository.GetStatusesResponse);
     */
    getStatuses(input: GetStatusesRequest, options?: RpcOptions): UnaryCall<GetStatusesRequest, GetStatusesResponse>;
    /**
     * CreateStatusRule creates or updates a status rule that should be applied
     * when setting statuses.
     *
     * @generated from protobuf rpc: CreateStatusRule(elephant.repository.CreateStatusRuleRequest) returns (elephant.repository.CreateStatusRuleResponse);
     */
    createStatusRule(input: CreateStatusRuleRequest, options?: RpcOptions): UnaryCall<CreateStatusRuleRequest, CreateStatusRuleResponse>;
    /**
     * DeleteStatusRule removes a status rule.
     *
     * @generated from protobuf rpc: DeleteStatusRule(elephant.repository.DeleteStatusRuleRequest) returns (elephant.repository.DeleteStatusRuleResponse);
     */
    deleteStatusRule(input: DeleteStatusRuleRequest, options?: RpcOptions): UnaryCall<DeleteStatusRuleRequest, DeleteStatusRuleResponse>;
    /**
     * GetStatusRules returns all status rules.
     *
     * @generated from protobuf rpc: GetStatusRules(elephant.repository.GetStatusRulesRequest) returns (elephant.repository.GetStatusRulesResponse);
     */
    getStatusRules(input: GetStatusRulesRequest, options?: RpcOptions): UnaryCall<GetStatusRulesRequest, GetStatusRulesResponse>;
    /**
     * SetWorkflow configures a workflow for a document type.
     *
     * @generated from protobuf rpc: SetWorkflow(elephant.repository.SetWorkflowRequest) returns (elephant.repository.SetWorkflowResponse);
     */
    setWorkflow(input: SetWorkflowRequest, options?: RpcOptions): UnaryCall<SetWorkflowRequest, SetWorkflowResponse>;
    /**
     * GetWorkflow for a document type.
     *
     * @generated from protobuf rpc: GetWorkflow(elephant.repository.GetWorkflowRequest) returns (elephant.repository.GetWorkflowResponse);
     */
    getWorkflow(input: GetWorkflowRequest, options?: RpcOptions): UnaryCall<GetWorkflowRequest, GetWorkflowResponse>;
    /**
     * DeleteWorkflow removes the workflow configuration for a document type.
     *
     * @generated from protobuf rpc: DeleteWorkflow(elephant.repository.DeleteWorkflowRequest) returns (elephant.repository.DeleteWorkflowResponse);
     */
    deleteWorkflow(input: DeleteWorkflowRequest, options?: RpcOptions): UnaryCall<DeleteWorkflowRequest, DeleteWorkflowResponse>;
}
/**
 * @generated from protobuf service elephant.repository.Workflows
 */
export class WorkflowsClient implements IWorkflowsClient, ServiceInfo {
    typeName = Workflows.typeName;
    methods = Workflows.methods;
    options = Workflows.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * UpdateStatus creates or updates a status that can be used for documents.
     *
     * @generated from protobuf rpc: UpdateStatus(elephant.repository.UpdateStatusRequest) returns (elephant.repository.UpdateStatusResponse);
     */
    updateStatus(input: UpdateStatusRequest, options?: RpcOptions): UnaryCall<UpdateStatusRequest, UpdateStatusResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateStatusRequest, UpdateStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetStatuses lists all enabled statuses.
     *
     * @generated from protobuf rpc: GetStatuses(elephant.repository.GetStatusesRequest) returns (elephant.repository.GetStatusesResponse);
     */
    getStatuses(input: GetStatusesRequest, options?: RpcOptions): UnaryCall<GetStatusesRequest, GetStatusesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusesRequest, GetStatusesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CreateStatusRule creates or updates a status rule that should be applied
     * when setting statuses.
     *
     * @generated from protobuf rpc: CreateStatusRule(elephant.repository.CreateStatusRuleRequest) returns (elephant.repository.CreateStatusRuleResponse);
     */
    createStatusRule(input: CreateStatusRuleRequest, options?: RpcOptions): UnaryCall<CreateStatusRuleRequest, CreateStatusRuleResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateStatusRuleRequest, CreateStatusRuleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteStatusRule removes a status rule.
     *
     * @generated from protobuf rpc: DeleteStatusRule(elephant.repository.DeleteStatusRuleRequest) returns (elephant.repository.DeleteStatusRuleResponse);
     */
    deleteStatusRule(input: DeleteStatusRuleRequest, options?: RpcOptions): UnaryCall<DeleteStatusRuleRequest, DeleteStatusRuleResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteStatusRuleRequest, DeleteStatusRuleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetStatusRules returns all status rules.
     *
     * @generated from protobuf rpc: GetStatusRules(elephant.repository.GetStatusRulesRequest) returns (elephant.repository.GetStatusRulesResponse);
     */
    getStatusRules(input: GetStatusRulesRequest, options?: RpcOptions): UnaryCall<GetStatusRulesRequest, GetStatusRulesResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRulesRequest, GetStatusRulesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetWorkflow configures a workflow for a document type.
     *
     * @generated from protobuf rpc: SetWorkflow(elephant.repository.SetWorkflowRequest) returns (elephant.repository.SetWorkflowResponse);
     */
    setWorkflow(input: SetWorkflowRequest, options?: RpcOptions): UnaryCall<SetWorkflowRequest, SetWorkflowResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetWorkflowRequest, SetWorkflowResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetWorkflow for a document type.
     *
     * @generated from protobuf rpc: GetWorkflow(elephant.repository.GetWorkflowRequest) returns (elephant.repository.GetWorkflowResponse);
     */
    getWorkflow(input: GetWorkflowRequest, options?: RpcOptions): UnaryCall<GetWorkflowRequest, GetWorkflowResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetWorkflowRequest, GetWorkflowResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteWorkflow removes the workflow configuration for a document type.
     *
     * @generated from protobuf rpc: DeleteWorkflow(elephant.repository.DeleteWorkflowRequest) returns (elephant.repository.DeleteWorkflowResponse);
     */
    deleteWorkflow(input: DeleteWorkflowRequest, options?: RpcOptions): UnaryCall<DeleteWorkflowRequest, DeleteWorkflowResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteWorkflowRequest, DeleteWorkflowResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service elephant.repository.Metrics
 */
export interface IMetricsClient {
    /**
     * Register a metric kind
     *
     * @generated from protobuf rpc: RegisterKind(elephant.repository.RegisterMetricKindRequest) returns (elephant.repository.RegisterMetricKindResponse);
     */
    registerKind(input: RegisterMetricKindRequest, options?: RpcOptions): UnaryCall<RegisterMetricKindRequest, RegisterMetricKindResponse>;
    /**
     * Delete a metric kind
     *
     * @generated from protobuf rpc: DeleteKind(elephant.repository.DeleteMetricKindRequest) returns (elephant.repository.DeleteMetricKindResponse);
     */
    deleteKind(input: DeleteMetricKindRequest, options?: RpcOptions): UnaryCall<DeleteMetricKindRequest, DeleteMetricKindResponse>;
    /**
     * List all metric kinds
     *
     * @generated from protobuf rpc: GetKinds(elephant.repository.GetMetricKindsRequest) returns (elephant.repository.GetMetricKindsResponse);
     */
    getKinds(input: GetMetricKindsRequest, options?: RpcOptions): UnaryCall<GetMetricKindsRequest, GetMetricKindsResponse>;
    /**
     * Register a data point
     *
     * @generated from protobuf rpc: RegisterMetric(elephant.repository.RegisterMetricRequest) returns (elephant.repository.RegisterMetricResponse);
     */
    registerMetric(input: RegisterMetricRequest, options?: RpcOptions): UnaryCall<RegisterMetricRequest, RegisterMetricResponse>;
    /**
     * GetMetrics returns metrics related to a document.
     *
     * @generated from protobuf rpc: GetMetrics(elephant.repository.GetMetricsRequest) returns (elephant.repository.GetMetricsResponse);
     */
    getMetrics(input: GetMetricsRequest, options?: RpcOptions): UnaryCall<GetMetricsRequest, GetMetricsResponse>;
}
/**
 * @generated from protobuf service elephant.repository.Metrics
 */
export class MetricsClient implements IMetricsClient, ServiceInfo {
    typeName = Metrics.typeName;
    methods = Metrics.methods;
    options = Metrics.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Register a metric kind
     *
     * @generated from protobuf rpc: RegisterKind(elephant.repository.RegisterMetricKindRequest) returns (elephant.repository.RegisterMetricKindResponse);
     */
    registerKind(input: RegisterMetricKindRequest, options?: RpcOptions): UnaryCall<RegisterMetricKindRequest, RegisterMetricKindResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterMetricKindRequest, RegisterMetricKindResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Delete a metric kind
     *
     * @generated from protobuf rpc: DeleteKind(elephant.repository.DeleteMetricKindRequest) returns (elephant.repository.DeleteMetricKindResponse);
     */
    deleteKind(input: DeleteMetricKindRequest, options?: RpcOptions): UnaryCall<DeleteMetricKindRequest, DeleteMetricKindResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteMetricKindRequest, DeleteMetricKindResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * List all metric kinds
     *
     * @generated from protobuf rpc: GetKinds(elephant.repository.GetMetricKindsRequest) returns (elephant.repository.GetMetricKindsResponse);
     */
    getKinds(input: GetMetricKindsRequest, options?: RpcOptions): UnaryCall<GetMetricKindsRequest, GetMetricKindsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMetricKindsRequest, GetMetricKindsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Register a data point
     *
     * @generated from protobuf rpc: RegisterMetric(elephant.repository.RegisterMetricRequest) returns (elephant.repository.RegisterMetricResponse);
     */
    registerMetric(input: RegisterMetricRequest, options?: RpcOptions): UnaryCall<RegisterMetricRequest, RegisterMetricResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterMetricRequest, RegisterMetricResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetMetrics returns metrics related to a document.
     *
     * @generated from protobuf rpc: GetMetrics(elephant.repository.GetMetricsRequest) returns (elephant.repository.GetMetricsResponse);
     */
    getMetrics(input: GetMetricsRequest, options?: RpcOptions): UnaryCall<GetMetricsRequest, GetMetricsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMetricsRequest, GetMetricsResponse>("unary", this._transport, method, opt, input);
    }
}
