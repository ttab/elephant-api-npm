/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,ts_nocheck,eslint_disable
// @generated from protobuf file "user/service.proto" (package "elephant.user", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Document } from "../newsdoc/newsdoc";
/**
 * @generated from protobuf message elephant.user.PushMessageRequest
 */
export interface PushMessageRequest {
    /**
     * Type of message being sent (e.g. "validation_error").
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * Recipient of the message (user sub).
     *
     * @generated from protobuf field: string recipient = 2;
     */
    recipient: string;
    /**
     * UUID of the associated document, optional.
     *
     * @generated from protobuf field: string doc_uuid = 3;
     */
    docUuid: string;
    /**
     * Type of the associated document, optional.
     *
     * @generated from protobuf field: string doc_type = 4;
     */
    docType: string;
    /**
     * Payload containing a key-value map.
     *
     * @generated from protobuf field: map<string, string> payload = 5;
     */
    payload: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message elephant.user.PushMessageResponse
 */
export interface PushMessageResponse {
}
/**
 * @generated from protobuf message elephant.user.PushInboxMessageRequest
 */
export interface PushInboxMessageRequest {
    /**
     * Recipient of the message (user sub).
     *
     * @generated from protobuf field: string recipient = 1;
     */
    recipient: string;
    /**
     * Payload containing a newsdoc document.
     *
     * @generated from protobuf field: newsdoc.Document payload = 2;
     */
    payload?: Document;
}
/**
 * @generated from protobuf message elephant.user.PushInboxMessageResponse
 */
export interface PushInboxMessageResponse {
}
/**
 * @generated from protobuf message elephant.user.PollMessagesRequest
 */
export interface PollMessagesRequest {
    /**
     * ID of the message after which to start returning messages.
     *
     * @generated from protobuf field: int64 after_id = 1;
     */
    afterId: bigint;
}
/**
 * @generated from protobuf message elephant.user.PollMessagesResponse
 */
export interface PollMessagesResponse {
    /**
     * ID of the most recent message returned. Useful for subsequent polling requests.
     * If no new messages are returned, it will reflect the "after_id" from the request.
     *
     * @generated from protobuf field: int64 last_id = 1;
     */
    lastId: bigint;
    /**
     * Messages sorted in descending order by id (reflects the created timestamp).
     *
     * @generated from protobuf field: repeated elephant.user.Message messages = 2;
     */
    messages: Message[];
}
/**
 * @generated from protobuf message elephant.user.Message
 */
export interface Message {
    /**
     * ID of the message.
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * Type of message being sent (e.g. "validation_error").
     *
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * Created timestamp is the RFC3339 timestamp
     * for when the message was created.
     *
     * @generated from protobuf field: string created = 3;
     */
    created: string;
    /**
     * Creator of the message (application sub).
     *
     * @generated from protobuf field: string created_by = 4;
     */
    createdBy: string;
    /**
     * Recipient of the message (user sub).
     *
     * @generated from protobuf field: string recipient = 5;
     */
    recipient: string;
    /**
     * UUID of the associated document, optional.
     *
     * @generated from protobuf field: string doc_uuid = 6;
     */
    docUuid: string;
    /**
     * Type of the associated document, optional.
     *
     * @generated from protobuf field: string doc_type = 7;
     */
    docType: string;
    /**
     * Payload containing a key-value map.
     *
     * @generated from protobuf field: map<string, string> payload = 8;
     */
    payload: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message elephant.user.PollInboxMessagesRequest
 */
export interface PollInboxMessagesRequest {
    /**
     * ID of the message after which to start returning messages.
     *
     * @generated from protobuf field: int64 after_id = 1;
     */
    afterId: bigint;
}
/**
 * @generated from protobuf message elephant.user.PollInboxMessagesResponse
 */
export interface PollInboxMessagesResponse {
    /**
     * ID of the most recent message returned. Useful for subsequent polling requests.
     * If no new messages are returned, it will reflect the "after_id" from the request.
     *
     * @generated from protobuf field: int64 last_id = 1;
     */
    lastId: bigint;
    /**
     * Messages sorted in descending order by id (reflects the created timestamp).
     *
     * @generated from protobuf field: repeated elephant.user.InboxMessage messages = 2;
     */
    messages: InboxMessage[];
}
/**
 * @generated from protobuf message elephant.user.InboxMessage
 */
export interface InboxMessage {
    /**
     * Recipient of the message (user sub).
     *
     * @generated from protobuf field: string recipient = 1;
     */
    recipient: string;
    /**
     * ID of the message.
     *
     * @generated from protobuf field: int64 id = 2;
     */
    id: bigint;
    /**
     * Created timestamp is the RFC3339 timestamp
     * for when the message was created.
     *
     * @generated from protobuf field: string created = 3;
     */
    created: string;
    /**
     * Creator of the message (application sub).
     *
     * @generated from protobuf field: string created_by = 4;
     */
    createdBy: string;
    /**
     * Updated timestamp is the RFC3339 timestamp
     * for when the message was last updated.
     *
     * @generated from protobuf field: string updated = 5;
     */
    updated: string;
    /**
     * Indicates whether the message has been read.
     *
     * @generated from protobuf field: bool is_read = 6;
     */
    isRead: boolean;
    /**
     * Payload containing a newsdoc document.
     *
     * @generated from protobuf field: newsdoc.Document payload = 7;
     */
    payload?: Document;
}
/**
 * @generated from protobuf message elephant.user.ListInboxMessagesRequest
 */
export interface ListInboxMessagesRequest {
    /**
     * ID of the message before which to list messages.
     *
     * @generated from protobuf field: int64 before_id = 1;
     */
    beforeId: bigint;
    /**
     * Number of messages to include in the results (defaults to 10).
     *
     * @generated from protobuf field: int64 size = 2;
     */
    size: bigint;
}
/**
 * @generated from protobuf message elephant.user.ListInboxMessagesResponse
 */
export interface ListInboxMessagesResponse {
    /**
     * ID of the latest message returned. Useful for subsequent polling requests.
     *
     * @generated from protobuf field: int64 latest_id = 1;
     */
    latestId: bigint;
    /**
     * ID of the earliest message returned. Useful for paginating backward.
     *
     * @generated from protobuf field: int64 earliest_id = 2;
     */
    earliestId: bigint;
    /**
     * Messages sorted in descending order by id (reflects the created timestamp).
     *
     * @generated from protobuf field: repeated elephant.user.InboxMessage messages = 3;
     */
    messages: InboxMessage[];
}
/**
 * @generated from protobuf message elephant.user.UpdateInboxMessageRequest
 */
export interface UpdateInboxMessageRequest {
    /**
     * ID of the message.
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * Sets the message's read status.
     *
     * @generated from protobuf field: bool is_read = 2;
     */
    isRead: boolean;
}
/**
 * @generated from protobuf message elephant.user.UpdateInboxMessageResponse
 */
export interface UpdateInboxMessageResponse {
}
/**
 * @generated from protobuf message elephant.user.DeleteInboxMessageRequest
 */
export interface DeleteInboxMessageRequest {
    /**
     * ID of the message.
     *
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message elephant.user.DeleteInboxMessageResponse
 */
export interface DeleteInboxMessageResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class PushMessageRequest$Type extends MessageType<PushMessageRequest> {
    constructor() {
        super("elephant.user.PushMessageRequest", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "doc_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "doc_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "payload", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<PushMessageRequest>): PushMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.recipient = "";
        message.docUuid = "";
        message.docType = "";
        message.payload = {};
        if (value !== undefined)
            reflectionMergePartial<PushMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushMessageRequest): PushMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string recipient */ 2:
                    message.recipient = reader.string();
                    break;
                case /* string doc_uuid */ 3:
                    message.docUuid = reader.string();
                    break;
                case /* string doc_type */ 4:
                    message.docType = reader.string();
                    break;
                case /* map<string, string> payload */ 5:
                    this.binaryReadMap5(message.payload, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: PushMessageRequest["payload"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PushMessageRequest["payload"] | undefined, val: PushMessageRequest["payload"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field elephant.user.PushMessageRequest.payload");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: PushMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string recipient = 2; */
        if (message.recipient !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recipient);
        /* string doc_uuid = 3; */
        if (message.docUuid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.docUuid);
        /* string doc_type = 4; */
        if (message.docType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.docType);
        /* map<string, string> payload = 5; */
        for (let k of globalThis.Object.keys(message.payload))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.payload[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.PushMessageRequest
 */
export const PushMessageRequest = new PushMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushMessageResponse$Type extends MessageType<PushMessageResponse> {
    constructor() {
        super("elephant.user.PushMessageResponse", []);
    }
    create(value?: PartialMessage<PushMessageResponse>): PushMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PushMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushMessageResponse): PushMessageResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PushMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.PushMessageResponse
 */
export const PushMessageResponse = new PushMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushInboxMessageRequest$Type extends MessageType<PushInboxMessageRequest> {
    constructor() {
        super("elephant.user.PushInboxMessageRequest", [
            { no: 1, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => Document }
        ]);
    }
    create(value?: PartialMessage<PushInboxMessageRequest>): PushInboxMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recipient = "";
        if (value !== undefined)
            reflectionMergePartial<PushInboxMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushInboxMessageRequest): PushInboxMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string recipient */ 1:
                    message.recipient = reader.string();
                    break;
                case /* newsdoc.Document payload */ 2:
                    message.payload = Document.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushInboxMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string recipient = 1; */
        if (message.recipient !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recipient);
        /* newsdoc.Document payload = 2; */
        if (message.payload)
            Document.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.PushInboxMessageRequest
 */
export const PushInboxMessageRequest = new PushInboxMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushInboxMessageResponse$Type extends MessageType<PushInboxMessageResponse> {
    constructor() {
        super("elephant.user.PushInboxMessageResponse", []);
    }
    create(value?: PartialMessage<PushInboxMessageResponse>): PushInboxMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PushInboxMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushInboxMessageResponse): PushInboxMessageResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PushInboxMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.PushInboxMessageResponse
 */
export const PushInboxMessageResponse = new PushInboxMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollMessagesRequest$Type extends MessageType<PollMessagesRequest> {
    constructor() {
        super("elephant.user.PollMessagesRequest", [
            { no: 1, name: "after_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PollMessagesRequest>): PollMessagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.afterId = 0n;
        if (value !== undefined)
            reflectionMergePartial<PollMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PollMessagesRequest): PollMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 after_id */ 1:
                    message.afterId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PollMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 after_id = 1; */
        if (message.afterId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.afterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.PollMessagesRequest
 */
export const PollMessagesRequest = new PollMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollMessagesResponse$Type extends MessageType<PollMessagesResponse> {
    constructor() {
        super("elephant.user.PollMessagesResponse", [
            { no: 1, name: "last_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message }
        ]);
    }
    create(value?: PartialMessage<PollMessagesResponse>): PollMessagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lastId = 0n;
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<PollMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PollMessagesResponse): PollMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 last_id */ 1:
                    message.lastId = reader.int64().toBigInt();
                    break;
                case /* repeated elephant.user.Message messages */ 2:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PollMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 last_id = 1; */
        if (message.lastId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.lastId);
        /* repeated elephant.user.Message messages = 2; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.PollMessagesResponse
 */
export const PollMessagesResponse = new PollMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("elephant.user.Message", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "doc_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "doc_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "payload", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.type = "";
        message.created = "";
        message.createdBy = "";
        message.recipient = "";
        message.docUuid = "";
        message.docType = "";
        message.payload = {};
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* string created */ 3:
                    message.created = reader.string();
                    break;
                case /* string created_by */ 4:
                    message.createdBy = reader.string();
                    break;
                case /* string recipient */ 5:
                    message.recipient = reader.string();
                    break;
                case /* string doc_uuid */ 6:
                    message.docUuid = reader.string();
                    break;
                case /* string doc_type */ 7:
                    message.docType = reader.string();
                    break;
                case /* map<string, string> payload */ 8:
                    this.binaryReadMap8(message.payload, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: Message["payload"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Message["payload"] | undefined, val: Message["payload"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field elephant.user.Message.payload");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* string created = 3; */
        if (message.created !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.created);
        /* string created_by = 4; */
        if (message.createdBy !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdBy);
        /* string recipient = 5; */
        if (message.recipient !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.recipient);
        /* string doc_uuid = 6; */
        if (message.docUuid !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.docUuid);
        /* string doc_type = 7; */
        if (message.docType !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.docType);
        /* map<string, string> payload = 8; */
        for (let k of globalThis.Object.keys(message.payload))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.payload[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollInboxMessagesRequest$Type extends MessageType<PollInboxMessagesRequest> {
    constructor() {
        super("elephant.user.PollInboxMessagesRequest", [
            { no: 1, name: "after_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PollInboxMessagesRequest>): PollInboxMessagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.afterId = 0n;
        if (value !== undefined)
            reflectionMergePartial<PollInboxMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PollInboxMessagesRequest): PollInboxMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 after_id */ 1:
                    message.afterId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PollInboxMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 after_id = 1; */
        if (message.afterId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.afterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.PollInboxMessagesRequest
 */
export const PollInboxMessagesRequest = new PollInboxMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollInboxMessagesResponse$Type extends MessageType<PollInboxMessagesResponse> {
    constructor() {
        super("elephant.user.PollInboxMessagesResponse", [
            { no: 1, name: "last_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InboxMessage }
        ]);
    }
    create(value?: PartialMessage<PollInboxMessagesResponse>): PollInboxMessagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lastId = 0n;
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<PollInboxMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PollInboxMessagesResponse): PollInboxMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 last_id */ 1:
                    message.lastId = reader.int64().toBigInt();
                    break;
                case /* repeated elephant.user.InboxMessage messages */ 2:
                    message.messages.push(InboxMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PollInboxMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 last_id = 1; */
        if (message.lastId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.lastId);
        /* repeated elephant.user.InboxMessage messages = 2; */
        for (let i = 0; i < message.messages.length; i++)
            InboxMessage.internalBinaryWrite(message.messages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.PollInboxMessagesResponse
 */
export const PollInboxMessagesResponse = new PollInboxMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InboxMessage$Type extends MessageType<InboxMessage> {
    constructor() {
        super("elephant.user.InboxMessage", [
            { no: 1, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "created", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "updated", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "is_read", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "payload", kind: "message", T: () => Document }
        ]);
    }
    create(value?: PartialMessage<InboxMessage>): InboxMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recipient = "";
        message.id = 0n;
        message.created = "";
        message.createdBy = "";
        message.updated = "";
        message.isRead = false;
        if (value !== undefined)
            reflectionMergePartial<InboxMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InboxMessage): InboxMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string recipient */ 1:
                    message.recipient = reader.string();
                    break;
                case /* int64 id */ 2:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string created */ 3:
                    message.created = reader.string();
                    break;
                case /* string created_by */ 4:
                    message.createdBy = reader.string();
                    break;
                case /* string updated */ 5:
                    message.updated = reader.string();
                    break;
                case /* bool is_read */ 6:
                    message.isRead = reader.bool();
                    break;
                case /* newsdoc.Document payload */ 7:
                    message.payload = Document.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InboxMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string recipient = 1; */
        if (message.recipient !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recipient);
        /* int64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).int64(message.id);
        /* string created = 3; */
        if (message.created !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.created);
        /* string created_by = 4; */
        if (message.createdBy !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdBy);
        /* string updated = 5; */
        if (message.updated !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.updated);
        /* bool is_read = 6; */
        if (message.isRead !== false)
            writer.tag(6, WireType.Varint).bool(message.isRead);
        /* newsdoc.Document payload = 7; */
        if (message.payload)
            Document.internalBinaryWrite(message.payload, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.InboxMessage
 */
export const InboxMessage = new InboxMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListInboxMessagesRequest$Type extends MessageType<ListInboxMessagesRequest> {
    constructor() {
        super("elephant.user.ListInboxMessagesRequest", [
            { no: 1, name: "before_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListInboxMessagesRequest>): ListInboxMessagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.beforeId = 0n;
        message.size = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListInboxMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListInboxMessagesRequest): ListInboxMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 before_id */ 1:
                    message.beforeId = reader.int64().toBigInt();
                    break;
                case /* int64 size */ 2:
                    message.size = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListInboxMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 before_id = 1; */
        if (message.beforeId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.beforeId);
        /* int64 size = 2; */
        if (message.size !== 0n)
            writer.tag(2, WireType.Varint).int64(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.ListInboxMessagesRequest
 */
export const ListInboxMessagesRequest = new ListInboxMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListInboxMessagesResponse$Type extends MessageType<ListInboxMessagesResponse> {
    constructor() {
        super("elephant.user.ListInboxMessagesResponse", [
            { no: 1, name: "latest_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "earliest_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InboxMessage }
        ]);
    }
    create(value?: PartialMessage<ListInboxMessagesResponse>): ListInboxMessagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.latestId = 0n;
        message.earliestId = 0n;
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<ListInboxMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListInboxMessagesResponse): ListInboxMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 latest_id */ 1:
                    message.latestId = reader.int64().toBigInt();
                    break;
                case /* int64 earliest_id */ 2:
                    message.earliestId = reader.int64().toBigInt();
                    break;
                case /* repeated elephant.user.InboxMessage messages */ 3:
                    message.messages.push(InboxMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListInboxMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 latest_id = 1; */
        if (message.latestId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.latestId);
        /* int64 earliest_id = 2; */
        if (message.earliestId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.earliestId);
        /* repeated elephant.user.InboxMessage messages = 3; */
        for (let i = 0; i < message.messages.length; i++)
            InboxMessage.internalBinaryWrite(message.messages[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.ListInboxMessagesResponse
 */
export const ListInboxMessagesResponse = new ListInboxMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateInboxMessageRequest$Type extends MessageType<UpdateInboxMessageRequest> {
    constructor() {
        super("elephant.user.UpdateInboxMessageRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_read", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateInboxMessageRequest>): UpdateInboxMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.isRead = false;
        if (value !== undefined)
            reflectionMergePartial<UpdateInboxMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateInboxMessageRequest): UpdateInboxMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* bool is_read */ 2:
                    message.isRead = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateInboxMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* bool is_read = 2; */
        if (message.isRead !== false)
            writer.tag(2, WireType.Varint).bool(message.isRead);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.UpdateInboxMessageRequest
 */
export const UpdateInboxMessageRequest = new UpdateInboxMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateInboxMessageResponse$Type extends MessageType<UpdateInboxMessageResponse> {
    constructor() {
        super("elephant.user.UpdateInboxMessageResponse", []);
    }
    create(value?: PartialMessage<UpdateInboxMessageResponse>): UpdateInboxMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateInboxMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateInboxMessageResponse): UpdateInboxMessageResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateInboxMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.UpdateInboxMessageResponse
 */
export const UpdateInboxMessageResponse = new UpdateInboxMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteInboxMessageRequest$Type extends MessageType<DeleteInboxMessageRequest> {
    constructor() {
        super("elephant.user.DeleteInboxMessageRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteInboxMessageRequest>): DeleteInboxMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteInboxMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteInboxMessageRequest): DeleteInboxMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteInboxMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.DeleteInboxMessageRequest
 */
export const DeleteInboxMessageRequest = new DeleteInboxMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteInboxMessageResponse$Type extends MessageType<DeleteInboxMessageResponse> {
    constructor() {
        super("elephant.user.DeleteInboxMessageResponse", []);
    }
    create(value?: PartialMessage<DeleteInboxMessageResponse>): DeleteInboxMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteInboxMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteInboxMessageResponse): DeleteInboxMessageResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteInboxMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.user.DeleteInboxMessageResponse
 */
export const DeleteInboxMessageResponse = new DeleteInboxMessageResponse$Type();
/**
 * @generated ServiceType for protobuf service elephant.user.Messages
 */
export const Messages = new ServiceType("elephant.user.Messages", [
    { name: "PushMessage", options: {}, I: PushMessageRequest, O: PushMessageResponse },
    { name: "PushInboxMessage", options: {}, I: PushInboxMessageRequest, O: PushInboxMessageResponse },
    { name: "PollMessages", options: {}, I: PollMessagesRequest, O: PollMessagesResponse },
    { name: "PollInboxMessages", options: {}, I: PollInboxMessagesRequest, O: PollInboxMessagesResponse },
    { name: "ListInboxMessages", options: {}, I: ListInboxMessagesRequest, O: ListInboxMessagesResponse },
    { name: "UpdateInboxMessage", options: {}, I: UpdateInboxMessageRequest, O: UpdateInboxMessageResponse },
    { name: "DeleteInboxMessage", options: {}, I: DeleteInboxMessageRequest, O: DeleteInboxMessageResponse }
]);
