/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,ts_nocheck,eslint_disable
// @generated from protobuf file "spell/service.proto" (package "elephant.spell", syntax proto3)
// tslint:disable
// @ts-nocheck
import { Dictionaries } from "./service";
import type { DeleteEntryResponse } from "./service";
import type { DeleteEntryRequest } from "./service";
import type { SetEntryResponse } from "./service";
import type { SetEntryRequest } from "./service";
import type { GetEntryResponse } from "./service";
import type { GetEntryRequest } from "./service";
import type { ListEntriesResponse } from "./service";
import type { ListEntriesRequest } from "./service";
import type { ListDictionariesResponse } from "./service";
import type { ListDictionariesRequest } from "./service";
import type { SupportedLanguagesResponse } from "./service";
import type { SupportedLanguagesRequest } from "./service";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Check } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TextResponse } from "./service";
import type { TextRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Check content for spelling errors.
 *
 * @generated from protobuf service elephant.spell.Check
 */
export interface ICheckClient {
    /**
     * Text spellchecks a text and returns the misspelled words or phrases.
     *
     * @generated from protobuf rpc: Text(elephant.spell.TextRequest) returns (elephant.spell.TextResponse);
     */
    text(input: TextRequest, options?: RpcOptions): UnaryCall<TextRequest, TextResponse>;
}
/**
 * Check content for spelling errors.
 *
 * @generated from protobuf service elephant.spell.Check
 */
export class CheckClient implements ICheckClient, ServiceInfo {
    typeName = Check.typeName;
    methods = Check.methods;
    options = Check.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Text spellchecks a text and returns the misspelled words or phrases.
     *
     * @generated from protobuf rpc: Text(elephant.spell.TextRequest) returns (elephant.spell.TextResponse);
     */
    text(input: TextRequest, options?: RpcOptions): UnaryCall<TextRequest, TextResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TextRequest, TextResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * Dictionaries is used to manage custom dictionary entries. Custom dictionaries
 * can be used to add both words and phrases.
 *
 * @generated from protobuf service elephant.spell.Dictionaries
 */
export interface IDictionariesClient {
    /**
     * SupportedLanguages returns a list of supported languages.
     *
     * @generated from protobuf rpc: SupportedLanguages(elephant.spell.SupportedLanguagesRequest) returns (elephant.spell.SupportedLanguagesResponse);
     */
    supportedLanguages(input: SupportedLanguagesRequest, options?: RpcOptions): UnaryCall<SupportedLanguagesRequest, SupportedLanguagesResponse>;
    /**
     * ListDictionaries lists the currently available custom dictionaries.
     *
     * @generated from protobuf rpc: ListDictionaries(elephant.spell.ListDictionariesRequest) returns (elephant.spell.ListDictionariesResponse);
     */
    listDictionaries(input: ListDictionariesRequest, options?: RpcOptions): UnaryCall<ListDictionariesRequest, ListDictionariesResponse>;
    /**
     * ListEntries lists entries in the custom dictionaries.
     *
     * @generated from protobuf rpc: ListEntries(elephant.spell.ListEntriesRequest) returns (elephant.spell.ListEntriesResponse);
     */
    listEntries(input: ListEntriesRequest, options?: RpcOptions): UnaryCall<ListEntriesRequest, ListEntriesResponse>;
    /**
     * GetEntry returns the details of a custom word or phrase.
     *
     * @generated from protobuf rpc: GetEntry(elephant.spell.GetEntryRequest) returns (elephant.spell.GetEntryResponse);
     */
    getEntry(input: GetEntryRequest, options?: RpcOptions): UnaryCall<GetEntryRequest, GetEntryResponse>;
    /**
     * SetEntry is used to add or update custom dictionary entries.
     *
     * @generated from protobuf rpc: SetEntry(elephant.spell.SetEntryRequest) returns (elephant.spell.SetEntryResponse);
     */
    setEntry(input: SetEntryRequest, options?: RpcOptions): UnaryCall<SetEntryRequest, SetEntryResponse>;
    /**
     * DeleteEntry is used to remove an entry.
     *
     * @generated from protobuf rpc: DeleteEntry(elephant.spell.DeleteEntryRequest) returns (elephant.spell.DeleteEntryResponse);
     */
    deleteEntry(input: DeleteEntryRequest, options?: RpcOptions): UnaryCall<DeleteEntryRequest, DeleteEntryResponse>;
}
/**
 * Dictionaries is used to manage custom dictionary entries. Custom dictionaries
 * can be used to add both words and phrases.
 *
 * @generated from protobuf service elephant.spell.Dictionaries
 */
export class DictionariesClient implements IDictionariesClient, ServiceInfo {
    typeName = Dictionaries.typeName;
    methods = Dictionaries.methods;
    options = Dictionaries.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * SupportedLanguages returns a list of supported languages.
     *
     * @generated from protobuf rpc: SupportedLanguages(elephant.spell.SupportedLanguagesRequest) returns (elephant.spell.SupportedLanguagesResponse);
     */
    supportedLanguages(input: SupportedLanguagesRequest, options?: RpcOptions): UnaryCall<SupportedLanguagesRequest, SupportedLanguagesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SupportedLanguagesRequest, SupportedLanguagesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListDictionaries lists the currently available custom dictionaries.
     *
     * @generated from protobuf rpc: ListDictionaries(elephant.spell.ListDictionariesRequest) returns (elephant.spell.ListDictionariesResponse);
     */
    listDictionaries(input: ListDictionariesRequest, options?: RpcOptions): UnaryCall<ListDictionariesRequest, ListDictionariesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDictionariesRequest, ListDictionariesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListEntries lists entries in the custom dictionaries.
     *
     * @generated from protobuf rpc: ListEntries(elephant.spell.ListEntriesRequest) returns (elephant.spell.ListEntriesResponse);
     */
    listEntries(input: ListEntriesRequest, options?: RpcOptions): UnaryCall<ListEntriesRequest, ListEntriesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListEntriesRequest, ListEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetEntry returns the details of a custom word or phrase.
     *
     * @generated from protobuf rpc: GetEntry(elephant.spell.GetEntryRequest) returns (elephant.spell.GetEntryResponse);
     */
    getEntry(input: GetEntryRequest, options?: RpcOptions): UnaryCall<GetEntryRequest, GetEntryResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEntryRequest, GetEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetEntry is used to add or update custom dictionary entries.
     *
     * @generated from protobuf rpc: SetEntry(elephant.spell.SetEntryRequest) returns (elephant.spell.SetEntryResponse);
     */
    setEntry(input: SetEntryRequest, options?: RpcOptions): UnaryCall<SetEntryRequest, SetEntryResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetEntryRequest, SetEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteEntry is used to remove an entry.
     *
     * @generated from protobuf rpc: DeleteEntry(elephant.spell.DeleteEntryRequest) returns (elephant.spell.DeleteEntryResponse);
     */
    deleteEntry(input: DeleteEntryRequest, options?: RpcOptions): UnaryCall<DeleteEntryRequest, DeleteEntryResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteEntryRequest, DeleteEntryResponse>("unary", this._transport, method, opt, input);
    }
}
