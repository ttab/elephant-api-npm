/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,ts_nocheck,eslint_disable
// @generated from protobuf file "replicant/service.proto" (package "elephant.replicant", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message elephant.replicant.SendDocumentRequest
 */
export interface SendDocumentRequest {
    /**
     * @generated from protobuf field: string uuid = 1
     */
    uuid: string;
    /**
     * @generated from protobuf field: bool force = 2
     */
    force: boolean;
}
/**
 * @generated from protobuf message elephant.replicant.SendDocumentResponse
 */
export interface SendDocumentResponse {
    /**
     * @generated from protobuf field: int64 target_version = 1
     */
    targetVersion: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class SendDocumentRequest$Type extends MessageType<SendDocumentRequest> {
    constructor() {
        super("elephant.replicant.SendDocumentRequest", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "force", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SendDocumentRequest>): SendDocumentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        message.force = false;
        if (value !== undefined)
            reflectionMergePartial<SendDocumentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendDocumentRequest): SendDocumentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* bool force */ 2:
                    message.force = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendDocumentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* bool force = 2; */
        if (message.force !== false)
            writer.tag(2, WireType.Varint).bool(message.force);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.replicant.SendDocumentRequest
 */
export const SendDocumentRequest = new SendDocumentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendDocumentResponse$Type extends MessageType<SendDocumentResponse> {
    constructor() {
        super("elephant.replicant.SendDocumentResponse", [
            { no: 1, name: "target_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SendDocumentResponse>): SendDocumentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.targetVersion = 0n;
        if (value !== undefined)
            reflectionMergePartial<SendDocumentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendDocumentResponse): SendDocumentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 target_version */ 1:
                    message.targetVersion = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendDocumentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 target_version = 1; */
        if (message.targetVersion !== 0n)
            writer.tag(1, WireType.Varint).int64(message.targetVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message elephant.replicant.SendDocumentResponse
 */
export const SendDocumentResponse = new SendDocumentResponse$Type();
/**
 * @generated ServiceType for protobuf service elephant.replicant.Replication
 */
export const Replication = new ServiceType("elephant.replicant.Replication", [
    { name: "SendDocument", options: {}, I: SendDocumentRequest, O: SendDocumentResponse }
]);
