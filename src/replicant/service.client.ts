/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter generate_dependencies,ts_nocheck,eslint_disable
// @generated from protobuf file "replicant/service.proto" (package "elephant.replicant", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Replication } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SendDocumentResponse } from "./service";
import type { SendDocumentRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service elephant.replicant.Replication
 */
export interface IReplicationClient {
    /**
     * @generated from protobuf rpc: SendDocument
     */
    sendDocument(input: SendDocumentRequest, options?: RpcOptions): UnaryCall<SendDocumentRequest, SendDocumentResponse>;
}
/**
 * @generated from protobuf service elephant.replicant.Replication
 */
export class ReplicationClient implements IReplicationClient, ServiceInfo {
    typeName = Replication.typeName;
    methods = Replication.methods;
    options = Replication.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SendDocument
     */
    sendDocument(input: SendDocumentRequest, options?: RpcOptions): UnaryCall<SendDocumentRequest, SendDocumentResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendDocumentRequest, SendDocumentResponse>("unary", this._transport, method, opt, input);
    }
}
